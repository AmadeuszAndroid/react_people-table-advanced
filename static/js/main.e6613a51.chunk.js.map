{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/People/PeopleFilters.tsx","components/Loader/Loader.tsx","components/Person/PersonLink.tsx","components/Person/PersonRow.tsx","components/People/PeopleTable.tsx","api.ts","components/People/PeoplePage.tsx","components/Navbar.tsx","components/HomePage.tsx","components/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","allCenturies","getAll","sex","get","setSexFilterActiveClass","selectedSex","classNames","setSearchCenturyClass","centuryValue","includes","centuriesAllClasses","length","setCenturyValues","clickedCentury","filter","century","className","type","placeholder","onChange","event","newQuery","target","centuries","query","Loader","PersonLink","person","slug","name","linkClass","linkTo","PersonRow","clickedPersonSlug","born","died","father","mother","motherText","motherName","fatherText","fatherName","rowClass","PeopleTable","people","toLowerCase","sort","order","displayedPeople","personName","personMatch","motherMatch","fatherMatch","Math","floor","p1","p2","localeCompare","setSortParam","sortParameter","setSortColumnClasses","sortBy","map","child","find","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isError","setIsError","showLoader","peopleLoaded","useEffect","getPeople","catch","useParams","Navbar","active","isActive","peopleLink","role","HomePage","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e6613a51.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { SearchLink } from '../SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const allCenturies = searchParams.getAll('centuries');\n  const sex = searchParams.get('sex');\n\n  const setSexFilterActiveClass = (selectedSex: string) => {\n    return classNames(\n      {\n        'is-active':\n          sex === selectedSex || (selectedSex === 'all' && sex === null),\n      },\n    );\n  };\n\n  const setSearchCenturyClass = (centuryValue: string) => {\n    return classNames('button', 'mr-1', {\n      'is-info': allCenturies.includes(centuryValue),\n    });\n  };\n\n  const centuriesAllClasses = classNames('button', 'is-success', {\n    'is-outlined': allCenturies.length > 0,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = event.target.value;\n\n    if (newQuery === '') {\n      searchParams.delete('query');\n    } else {\n      searchParams.set('query', newQuery);\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const setCenturyValues = (clickedCentury: string) => {\n    if (allCenturies.includes(clickedCentury)) {\n      return allCenturies.filter(century => century !== clickedCentury);\n    }\n\n    return [...allCenturies, clickedCentury];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={setSexFilterActiveClass('all')}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={setSexFilterActiveClass('m')}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={setSexFilterActiveClass('f')}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleChange}\n            value={searchParams.get('query') || ''}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            <SearchLink\n              data-cy=\"century\"\n              className={setSearchCenturyClass('16')}\n              params={{ centuries: setCenturyValues('16') }}\n            >\n              16\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={setSearchCenturyClass('17')}\n              params={{ centuries: setCenturyValues('17') }}\n            >\n              17\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={setSearchCenturyClass('18')}\n              params={{ centuries: setCenturyValues('18') }}\n            >\n              18\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={setSearchCenturyClass('19')}\n              params={{ centuries: setCenturyValues('19') }}\n            >\n              19\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={setSearchCenturyClass('20')}\n              params={{ centuries: setCenturyValues('20') }}\n            >\n              20\n            </SearchLink>\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={centuriesAllClasses}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport { Person } from '../../types';\n\ntype PersonLinkProps = {\n  person: Person\n};\n\nexport const PersonLink = (\n  { person: { slug, name, sex } }: PersonLinkProps,\n) => {\n  const [searchParams] = useSearchParams();\n\n  const linkClass = classNames({ 'has-text-danger': sex === 'f' });\n  const linkTo = `/people/${slug}?${searchParams.toString()}`;\n\n  return (\n    <Link className={linkClass} to={linkTo}>{name}</Link>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from './PersonLink';\n\ntype PersonRowProps = {\n  person: Person\n  clickedPersonSlug?: string\n};\n\nexport const PersonRow = ({ person, clickedPersonSlug }: PersonRowProps) => {\n  const {\n    slug,\n    sex,\n    born,\n    died,\n    father,\n    mother,\n    motherName,\n    fatherName,\n  } = person;\n\n  const motherText = motherName || '-';\n  const fatherText = fatherName || '-';\n\n  const rowClass = classNames(\n    { 'has-background-warning': slug === clickedPersonSlug },\n  );\n\n  return (\n    <tr data-cy=\"person\" className={rowClass}>\n      <td>\n        <PersonLink\n          person={person}\n        />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink\n            person={mother}\n          />\n        ) : <>{motherText}</>}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink\n            person={father}\n          />\n        ) : <>{fatherText}</>}\n      </td>\n    </tr>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../../types';\nimport { PersonRow } from '../Person/PersonRow';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\n\ntype PeopleTableProps = {\n  people: Person[]\n  clickedPersonSlug?: string\n};\n\nexport const PeopleTable = (\n  { people, clickedPersonSlug }: PeopleTableProps,\n) => {\n  const [searchParams] = useSearchParams();\n\n  const query = searchParams.get('query')?.toLowerCase();\n  const centuries = searchParams.getAll('centuries');\n  const sex = searchParams.get('sex');\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n  let displayedPeople = [...people];\n\n  if (query && query !== null) {\n    displayedPeople = displayedPeople.filter(person => {\n      const personName = person.name.toLowerCase();\n      const motherName = person.motherName?.toLowerCase();\n      const fatherName = person.fatherName?.toLowerCase();\n      const personMatch = personName.includes(query);\n      const motherMatch = motherName?.includes(query);\n      const fatherMatch = fatherName?.includes(query);\n\n      return personMatch || motherMatch || fatherMatch;\n    });\n  }\n\n  if (centuries.length > 0) {\n    displayedPeople = displayedPeople.filter(person => centuries.includes(\n      (Math.floor(person.born / 100) + 1).toString(),\n    ));\n  }\n\n  if (sex !== null) {\n    displayedPeople = displayedPeople.filter(person => person.sex === sex);\n  }\n\n  switch (sort) {\n    case 'name':\n    case 'sex':\n      displayedPeople.sort((p1, p2) => {\n        return order === 'desc'\n          ? p2[sort].localeCompare(p1[sort])\n          : p1[sort].localeCompare(p2[sort]);\n      });\n      break;\n    case 'died':\n    case 'born':\n      displayedPeople.sort((p1, p2) => {\n        return order === 'desc' ? p2[sort] - p1[sort] : p1[sort] - p2[sort];\n      });\n      break;\n    default:\n      break;\n  }\n\n  const setSortParam = (sortParameter: string): SearchParams => {\n    if (sort === null || sort !== sortParameter) {\n      return { sort: sortParameter, order: null };\n    }\n\n    switch (order) {\n      default:\n      case null:\n        return { order: 'desc' };\n      case 'desc':\n        return { sort: null, order: null };\n    }\n  };\n\n  const setSortColumnClasses = (sortBy: string) => {\n    return classNames('fas', {\n      'fa-sort': sort !== sortBy,\n    }, {\n      'fa-sort-down': sort === sortBy && order === 'desc',\n    }, {\n      'fa-sort-up': sort === sortBy && order === null,\n    });\n  };\n\n  return (\n    <>\n      {displayedPeople.length === 0 ? (\n        <p>There are no people matching the current search criteria</p>\n      ) : (\n        <table\n          data-cy=\"peopleTable\"\n          className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n        >\n          <thead>\n            <tr>\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Name\n                  <SearchLink\n                    className=\"is-active\"\n                    params={setSortParam('name')}\n                  >\n                    <span className=\"icon\">\n                      <i className={setSortColumnClasses('name')} />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Sex\n                  <SearchLink\n                    className=\"is-active\"\n                    params={setSortParam('sex')}\n                  >\n                    <span className=\"icon\">\n                      <i className={setSortColumnClasses('sex')} />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Born\n                  <SearchLink\n                    className=\"is-active\"\n                    params={setSortParam('born')}\n                  >\n                    <span className=\"icon\">\n                      <i className={setSortColumnClasses('born')} />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Died\n                  <SearchLink\n                    className=\"is-active\"\n                    params={setSortParam('died')}\n                  >\n                    <span className=\"icon\">\n                      <i className={setSortColumnClasses('died')} />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {displayedPeople.map(person => {\n              const child = { ...person };\n\n              child.father = people.find(\n                father => father.name === child.fatherName,\n              );\n\n              child.mother = people.find(\n                mother => mother.name === child.motherName,\n              );\n\n              return (\n                <PersonRow\n                  key={child.slug}\n                  person={child}\n                  clickedPersonSlug={clickedPersonSlug}\n                />\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isError, setIsError] = useState(false);\n\n  const showLoader = people === null && !isError;\n  const peopleLoaded = people && people.length > 0;\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true));\n  }, []);\n\n  const { slug } = useParams();\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {peopleLoaded && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {showLoader && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {people && people.length === 0 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {peopleLoaded && (\n                <PeopleTable people={people} clickedPersonSlug={slug} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\ntype Active = {\n  isActive: boolean\n};\n\nexport const Navbar = () => {\n  const [searchParams] = useSearchParams();\n\n  const linkClass = (active: Active) => classNames('navbar-item', {\n    'has-background-grey-lighter': active.isActive,\n  });\n  const peopleLink = `people?${searchParams.toString()}`;\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={linkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to={peopleLink}\n            className={linkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { PeoplePage } from './components/People/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n            <Route\n              path=\"/\"\n              element={<HomePage />}\n            />\n            <Route path=\"people\">\n              <Route\n                index\n                element={(\n                  <PeoplePage />\n                )}\n              />\n              <Route\n                path=\":slug\"\n                element={(\n                  <PeoplePage />\n                )}\n              />\n            </Route>\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}